---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: rpm-build
  name: import-to-quay
spec:
  description: Import built results into quay.io
  params:
    - description: Source Repository URL
      name: git-url
      type: string
    - name: revision
      description: Revision of the Source Repository
      type: string
    - name: ociStorage
      type: string
    - description: The name of the package we build
      name: package-name
      type: string
    - name: test-suffix
      type: string
      description: |
        Test-only.  If testing the pipeline, we still want to test the upload to
        quay.io, but we don't want to mix-up with the real "production" uploads.
      default: ""
    - name: start-time
      description: Store pipeline start time
      default: ""
      type: string
    - name: pipelinerun-id
      description: PipelineRun ID (namespace/name)
      default: ""
      type: string
    - description: The Trusted Artifact URI pointing to the x86_64 build output
      name: x86_64-artifact
      type: string
    - description: The Trusted Artifact URI pointing to the aarch64 build output
      name: aarch64-artifact
      type: string
    - description: The Trusted Artifact URI pointing to the s390x build output
      name: s390x-artifact
      type: string
    - description: The Trusted Artifact URI pointing to the ppc64le build output
      name: ppc64le-artifact
      type: string
    - description: RPM Build environment OCI image to run scripts in
      name: script-environment-image
      type: string
  results:
    - name: IMAGE_URL
      description: Location of build artifact
    - name: IMAGE_DIGEST
      description: Build artifact digest
    - name: NVR
      description: name-version-release of built package
    - name: SBOM_BLOB_URL
      description: SPDX SBOM
      type: string
    - name: PULP-IMAGE_URL
      description: Location of Pulp build artifact
    - name: PULP-IMAGE_DIGEST
      description: Pulp build artifact digest
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir/results
        name: workdir
  steps:
    - name: use-trusted-artifact-x86-64
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:9b180776a41d9a22a1c51539f1647c60defbbd55b44bbebdd4130e33512d8b0d
      args:
        - use
        - $(params.x86_64-artifact)=/var/workdir/results
    - name: use-trusted-artifact-aarch64
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:9b180776a41d9a22a1c51539f1647c60defbbd55b44bbebdd4130e33512d8b0d
      args:
        - use
        - $(params.aarch64-artifact)=/var/workdir/results
    - name: use-trusted-artifact-s390x
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:9b180776a41d9a22a1c51539f1647c60defbbd55b44bbebdd4130e33512d8b0d
      args:
        - use
        - $(params.s390x-artifact)=/var/workdir/results
    - name: use-trusted-artifact-ppc64le
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:9b180776a41d9a22a1c51539f1647c60defbbd55b44bbebdd4130e33512d8b0d
      args:
        - use
        - $(params.ppc64le-artifact)=/var/workdir/results
    - name: gather-rpms
      image: $(params.script-environment-image)
      script: |
        #!/usr/bin/env bash
        set -e
        cd /var/workdir/results
        /usr/bin/gather-rpms.py \
            --source-url git+$(params.git-url)#$(params.revision) \
            --start-time $(params.start-time) \
            --end-time `date "+%s"` \
            --pipeline-id "$(params.pipelinerun-id)"
        echo "Gathered `ls oras-staging | wc -l` files for upload"

    - name: push-to-quay-select-auth
      image: quay.io/konflux-ci/oras:latest@sha256:720ad83b2b7f9239b0f04fabbeea568611dd07c18ad99f79b98ad0e5aa76331c
      script: |
        #!/usr/bin/env bash
        set -e

        cd /var/workdir/results

        # Get NVR from any SRPM
        NVR=$(<nvr.log)
        IMAGE_URL="$(params.ociStorage).nvr-$NVR"

        echo "Selecting auth for $IMAGE_URL"
        select-oci-auth $IMAGE_URL > $HOME/auth.json

        echo "Pushing to: $IMAGE_URL"
        cd oras-staging
        # TODO: rewrite to push/attach + xargs for bigger builds (texlive has ~580 rpms)
        oras push \
             --registry-config "$HOME/auth.json" \
             --artifact-type application/vnd.rpm.build.v0 \
             --annotation quay.expires-after=14d \
             $IMAGE_URL \
             `cat ../oras-push-list.txt` | tee /tmp/oras.log

        grep "Digest:" /tmp/oras.log | awk '{print $2}' | tr -d '\n' > $(results.IMAGE_DIGEST.path)
        echo -n $IMAGE_URL > $(results.IMAGE_URL.path)
        echo -n $NVR > $(results.NVR.path)
    - name: explode-srpm
      image: $(params.script-environment-image)
      workingDir: /var/workdir/results/oras-staging
      script: |
        #!/usr/bin/env bash
        set +x
        # expects to parse all srpm files in /mnt
        # writes output to /mnt/syft-sbom.json
        SRCDIR=$(pwd)
        TMPDIR=./syft-extracted
        mkdir $TMPDIR

        cd $TMPDIR || exit 1
        for rpm in $SRCDIR/*.src.rpm ; do
          echo "Extracting srpm $rpm"
          rpm_fn=$(basename "$rpm")
          cp "$rpm" .
          rpm2archive -n "$rpm_fn" | tar -x
          rm "$rpm_fn"
        done

        echo "Decompressing found archives"
        # TODO: improve detecting archives
        tar -vxf ./*.tar
        tar -vxzf ./*.tar.gz
        tar -vxzf ./*.tgz
        tar -vxJf ./*.tar.xz
        tar -vxjf ./*.tar.bz2
        #unzip ./*.zip &>/dev/null # missing in mock image
        true
    - name: run-syft
      image: registry.access.redhat.com/rh-syft-tech-preview/syft-rhel9:1.19.0@sha256:070ecb89de5104bb64fbf399a991a975e7d4d7e0cea0f7beb1e591b5591991c8
      workingDir: /var/workdir/results/oras-staging
      script: |
        syft ./syft-extracted -o spdx-json > syft-sbom.json
    - name: merge-syft-sbom
      image: $(params.script-environment-image)
      workingDir: /var/workdir/results/oras-staging
      script: |
        #!/bin/bash
        set -x
        python3 /usr/local/bin/merge_syft_sbom.py --sbom-spdx sbom-spdx.json --syft-sbom syft-sbom.json --sbom-merged sbom-merged.json
    - name: show-sbom
      image: quay.io/konflux-ci/appstudio-utils:ab6b0b8e40e440158e7288c73aff1cf83a2cc8a9@sha256:24179f0efd06c65d16868c2d7eb82573cce8e43533de6cea14fec3b7446e0b14
      workingDir: /var/workdir/results/oras-staging
      script: |
        #!/usr/bin/env bash
        jq . sbom-merged.json
    - name: push-to-pulp-select-auth
      image: $(params.script-environment-image)
      script: |
        #!/usr/bin/env bash
        set -e

        if [ -f /pulp-access/oauth-cli.toml ]; then
          cd /pulp-access
          /usr/bin/pulp-upload.py \
            --config oauth-cli.toml \
            --repository_name "$(params.package-name)" \
            --rpm_path "/var/workdir/results" \
            --sbom_path "/var/workdir/results/oras-staging/sbom-merged.json" \
            --build_id "$(params.pipelinerun-id)" \
            --namespace "$(context.taskRun.namespace)" \
            --parent_package "$(params.package-name)" \
            --output_json ~/pulp_results.json \
            --artifact_results "$(results.PULP-IMAGE_URL.path)","$(results.PULP-IMAGE_DIGEST.path)"

        else
          echo "Pulp config file does not exist; skipping push and writing empty Pulp result files"
          : > "$(results.PULP-IMAGE_URL.path)"
          : > "$(results.PULP-IMAGE_DIGEST.path)"
        fi
      volumeMounts:
        - mountPath: /pulp-access
          readOnly: true
          name: pulp-access-credentials
    - name: upload-sbom-to-quay
      image: registry.redhat.io/rhtas/cosign-rhel9:1.3.0@sha256:fc31f6169831d6dc2102bb6c21df224f19955551245c7476ed61e4ca439a2e43
      script: |
        #!/usr/bin/env bash
        cosign \
         attach sbom \
         --sbom results/oras-staging/sbom-merged.json \
         --type spdx \
         $(cat $(results.IMAGE_URL.path))@$(cat $(results.IMAGE_DIGEST.path))
      workingDir: /var/workdir
    - name: report-sbom-url
      image: quay.io/konflux-ci/yq:latest@sha256:7a5039c24795582613f2889806b16fdd1ddc971f11594a983b9a6e6f027fcb32
      workingDir: /var/workdir/results/oras-staging
      script: |
        #!/usr/bin/env bash
        set -e
        IMAGE_URL=$(cat $(results.IMAGE_URL.path))
        REPO=${IMAGE_URL%:*}
        echo "Found that ${REPO} is the repository for ${IMAGE_URL}"
        SBOM_DIGEST=$(sha256sum sbom-spdx.json | awk '{ print $1 }')
        echo "Found that ${SBOM_DIGEST} is the SBOM digest"
        echo -n "${REPO}@sha256:${SBOM_DIGEST}" | tee $(results.SBOM_BLOB_URL.path)
  volumes:
    - name: pulp-access-credentials
      secret:
        optional: true
        secretName: pulp-access
    - name: workdir
      emptyDir: {}
