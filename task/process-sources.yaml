---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/tags: rpm-build
  name: get-rpm-sources
spec:
  description: |-
    Download source files referenced by a spec file.
  params:
    - description: Package name to clone
      name: package-name
      type: string
    - name: specfile
      description: |
        Name of specfile when specfile doesn't have the same prefix name as
        package name.  Default is null and $(params.package-name).spec is used.
      type: string
      default: "null"
    - description: The Trusted Artifact URI pointing to the artifact with the source code.
      name: source-artifact
      type: string
    - name: ociStorage
      description: The OCI repository where the Trusted Artifacts are stored.
      type: string
    - name: ociArtifactExpiresAfter
      description: How long Trusted Artifacts should be retained
      type: string
    - description: RPM Build environment OCI image to run scripts in
      name: script-environment-image
      type: string
    - description: Is the build hermetic?
      name: hermetic
      type: string
    - description: List of architectures we build RPMs for
      name: build-architectures
      type: array
  results:
    - name: dependencies-artifact
      description: The Trusted Artifact URI pointing to the artifact with the rpm deps and source.
      type: string
    - name: skip-mpc-tasks
      description: |
        The RPM Build Pipeline tasks depend on each other (subsequent tasks
        consume results from previous tasks).  These dependencies are
        declaratively specified, and if a task is skipped and doesn't provide
        results, the subsequent task is skipped as well.  But we need the
        Pipeline to continue.  For this reason, we don't skip tasks â€” instead,
        we perform a no-op ("do nothing") inside the task, if needed.

        Here's where another complication arises; the Multi-Platform Controller
        in Konflux allocates architecture-specific VMs for us, even if a task is
        effectively doing nothing.  To work around this, we use the concept of
        PLATFORM=localhost, which prevents this VM allocation.  This Tekton step
        is used to programmatically determine which MPC-dependent tasks should
        be "skipped".

        Related issues
        - https://github.com/tektoncd/pipeline/issues/3749
        - https://github.com/tektoncd/pipeline/issues/1684
        - https://github.com/tektoncd/pipeline/issues/1023
      properties:
        deps-ppc64le:
          type: string
        deps-x86_64:
          type: string
        deps-s390x:
          type: string
        deps-aarch64:
          type: string
        deps-i686:
          type: string
        build-ppc64le:
          type: string
        build-x86_64:
          type: string
        build-s390x:
          type: string
        build-aarch64:
          type: string
        build-i686:
          type: string
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: use-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:9b180776a41d9a22a1c51539f1647c60defbbd55b44bbebdd4130e33512d8b0d
      args:
        - use
        - $(params.source-artifact)=/var/workdir/source
    - name: download
      image: $(params.script-environment-image)
      script: |
        set -ex
        cd "/var/workdir/source"

        if test "$(params.specfile)" != "null" ; then
          specfile_name=$(params.specfile)
        else
          specfile_prefix=$(params.package-name)
          specfile_name="${specfile_prefix}.spec"
        fi

        dist-git-client --forked-from https://src.fedoraproject.org/rpms/$(params.package-name) sources
        # Make sure we use norpm: https://github.com/fedora-infra/rpmautospec/pull/319
        rpmautospec process-distgit "$specfile_name" "$specfile_name"
        git diff
        # We remove the .git repository here to ensure that historical code does
        # not affect the output of the build.  This is critical because the user
        # has full control over later build process stages (even though in an
        # isolated environment).
        rm -r .git
    - name: select-mpc-machines-or-skip
      image: $(params.script-environment-image)
      args:
        - "$(params.build-architectures[*])"
      script: |
        #!/bin/bash
        set -x

        if $(params.hermetic); then
          python3 /usr/local/bin/select_architectures.py "$@" --hermetic --results-file "$(results.skip-mpc-tasks.path)"
        else
          python3 /usr/local/bin/select_architectures.py "$@" --results-file "$(results.skip-mpc-tasks.path)"
        fi
    - name: create-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:9b180776a41d9a22a1c51539f1647c60defbbd55b44bbebdd4130e33512d8b0d
      args:
        - create
        - --store
        - $(params.ociStorage)
        - $(results.dependencies-artifact.path)=/var/workdir/source
      env:
        - name: IMAGE_EXPIRES_AFTER
          value: $(params.ociArtifactExpiresAfter)
  volumes:
    - name: workdir
      emptyDir: {}
